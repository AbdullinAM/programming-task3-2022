/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package main;

import core.Cell;
import core.Field;
import javafx.util.Pair;
import org.junit.jupiter.api.Test;

import java.util.LinkedHashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class FieldTest {
    @Test
    public void testFieldCreate() {
        Field field = new Field(10, 9, 0);
        //checking field settings
        assertSame(0, field.getAmountMine());
        assertSame(7, new Field(2, 4, 7).getAmountMine());
        assertSame(10, field.getCol());
        assertSame(9, field.getRow());

        assertSame(Cell.State.Empty, field.getCell(5,5).getState());
        assertSame(Cell.State.Mine, new Field(2, 2, 4).getCell(1,1).getState());

        //checking correct settings
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> field.getCell(20, 20));
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> field.getCell(-5, -1));
        assertDoesNotThrow(() -> field.getCell(2, 4));
        assertDoesNotThrow(() -> field.getCell(1, 3));

        assertThrows(NumberFormatException.class, () -> new Field(0, 0, 10));
        assertThrows(NumberFormatException.class, () -> new Field(0, 5, 3));
        assertThrows(NumberFormatException.class, () -> new Field(5, 0, 0));
        assertThrows(NumberFormatException.class, () -> new Field(10, 10, 101));
        assertDoesNotThrow(() -> new Field(10, 10, 100));
        assertDoesNotThrow(() -> new Field(7, 1, 5));

    }

    @Test
    public void testFieldMine() {
        Field field = new Field(5, 5, 25);
        assertSame(6, field.getMineAround(3, 3));
        assertSame(2, field.getMineAround(0, 0));
        assertSame(5, field.getMineAround(0, 1));

        field = new Field(2, 2, 0);
        assertSame(0, field.getMineAround(1, 1));
        assertSame(0, field.getMineAround(0, 0));
    }

    @Test
    public void testFieldAround() {
        Field field = new Field(10, 10, 10);
        assertTrue(field.getCell(1, 0).isHidden()); //hidden
        assertTrue(field.getCell(5, 5).isHidden());
        assertTrue(field.hasHiddenAround(4,5));
        assertTrue(field.hasHiddenAround(0,0));

        field.openAroundCell(0, 0);
        assertFalse(field.getCell(1, 0).isHidden()); //not hidden
        assertFalse(field.getCell(0, 1).isHidden());
        field.openAroundCell(1, 0);
        field.openAroundCell(0, 1);
        assertFalse(field.hasHiddenAround(0, 0));

        field.openCell(5, 5);
        assertFalse(field.getCell(5, 5).isHidden()); //not hidden
    }

    @Test
    public void testFieldEndGame() {
        Field field = new Field(2, 2, 0);
        field.markCounter();
        assertSame(0, field.getCorrectMarkMines()); //no correct marked cells
        assertSame(0, field.getTotalMarkMines()); //no marked cells
        assertFalse(field.checkGameOver()); //its win

        field.getCell(1, 1).setMark(true); //marked cell(1, 1)
        assertSame(1, field.getTotalMarkMines()); //this cell is marked but incorrect
        assertSame(0, field.getCorrectMarkMines());
        assertTrue(field.checkGameOver()); //it's a loss

        field.getCell(1, 0).setMark(true); //and again
        assertSame(2, field.getTotalMarkMines());
        assertTrue(field.checkGameOver());

        field = new Field(2, 2, 4); //a new field where all cells are mines
        field.getCell(0, 0).setMark(true);
        field.getCell(0, 1).setMark(true);
        field.getCell(1, 0).setMark(true); //marked 3 of 4 cells

        assertSame(3, field.getCorrectMarkMines()); //all mines --> 3 correct
        assertTrue(field.checkGameOver()); //but not 4 --> loss
        field.getCell(1, 1).setMark(true);
        assertSame(4, field.getTotalMarkMines());
        assertFalse(field.checkGameOver()); //4 of 4 marked --> win
    }

    @Test
    public void testFieldNeighbours() {
        Field field = new Field(2, 2, 0);
        Map<Integer, Pair<Integer, Integer>> expected = new LinkedHashMap<>();
        expected.put(1, new Pair<>(1, 0));
        expected.put(3, new Pair<>(0, 1));
        assertEquals(expected, field.getNeighbours(0, 0));
        expected.clear();

        expected.put(0, new Pair<>(0, 1));
        expected.put(2, new Pair<>(1, 0));
        assertEquals(expected, field.getNeighbours(1,1));
    }


}
